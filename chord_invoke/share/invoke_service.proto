syntax = "proto3";

package chord_invoke;

service InvokeService {

    rpc IdentifyAgent(IdentifyAgentRequest) returns (IdentifyAgentResult);

    // ProvisionMachine
    rpc CreateMachine(CreateMachineRequest) returns (CreateMachineResult);

    rpc SignCertificates(SignCertificatesRequest) returns (SignCertificatesResult);

    rpc AdvertiseEndpoints(AdvertiseEndpointsRequest) returns (AdvertiseEndpointsResult);

    // InvokeMachine
    rpc RunMachine(RunMachineRequest) returns (RunMachineResult);

    // TerminateMachine
    rpc DeleteMachine(DeleteMachineRequest) returns (DeleteMachineResult);
}

message IdentifyAgentRequest {
}

message IdentifyAgentResult {
    string agent_name = 1;
    uint64 uptime_millis = 2;
}

message CreateMachineRequest {
    string execution_url = 1;
    string name = 2;
    string config_hash = 3;
    repeated RequestedPort requested_ports = 4;
    bool requested_control = 5;
    bool start_suspended = 6;
}

message CreateMachineResult {
    string machine_url = 1;
    repeated DeclaredPort declared_ports = 2;
    repeated DeclaredEndpoint declared_endpoints = 3;
    sint32 control_endpoint_index = 4;
}

message SignCertificatesRequest {
    string machine_url = 1;
    repeated DeclaredPort declared_ports = 2;
    repeated DeclaredEndpoint declared_endpoints = 3;
    sint32 control_endpoint_index = 4;
}

message SignCertificatesResult {
    repeated SignedEndpoint signed_endpoints = 1;
}

message AdvertiseEndpointsRequest {
    string machine_url = 1;
    repeated BoundEndpoint bound_endpoints = 2;
}

message AdvertiseEndpointsResult {
}

message RunMachineRequest {
    string machine_url = 1;
    repeated SignedEndpoint signed_endpoints = 2;
}

message RunMachineResult {
    repeated BoundEndpoint bound_endpoints = 1;
}

message DeleteMachineRequest {
    string machine_url = 1;
}

message DeleteMachineResult {
    sint32 exit_status = 1;
    uint64 elapsed_time_ms = 3;
}

enum PortType {
    InvalidPortType = 0;
    OneShot = 1;
    Streaming = 2;
}

enum PortDirection {
    InvalidPortDirection = 0;
    Client = 1;
    Server = 2;
    BiDirectional = 3;
}

message RequestedPort {
    string protocol_url = 1;
    PortType port_type = 2;
    PortDirection port_direction = 3;
}

message DeclaredPort {
    string protocol_url = 1;
    PortType port_type = 2;
    PortDirection port_direction = 3;
    sint32 endpoint_index = 4;
}

message DeclaredEndpoint {
    string endpoint_url = 1;
    bytes csr = 2;
}

message SignedEndpoint {
    string endpoint_url = 1;
    bytes certificate = 2;
}

message BoundEndpoint {
    string endpoint_url = 1;
}
